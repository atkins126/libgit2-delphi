(**
 * @file git2/errors.h
 * @brief Git error handling routines and variables
 * @ingroup Git
 * @{
  *)

(** Generic return codes  *)

const
  GIT_OK                      = 0; (**< No error  *)
  GIT_ERROR                   = -1; (**< Generic error  *)
  GIT_ENOTFOUND               = -3; (**< Requested object could not be found  *)
  GIT_EEXISTS                 = -4; (**< Object exists preventing operation  *)
  GIT_EAMBIGUOUS              = -5; (**< More than one object matches  *)
  GIT_EBUFS                   = -6; (**< Output buffer too short to hold data  *)
  (**
   * GIT_EUSER is a special error that is never generated by libgit2
   * code.  You can return it from a callback (e.g to stop an iteration)
   * to know that it was generated by the callback and not by libgit2.
   *)
  GIT_EUSER                   = -7;
  GIT_EBAREREPO               = -8; (**< Operation not allowed on bare repository  *)
  GIT_EUNBORNBRANCH           = -9; (**< HEAD refers to branch with no commits  *)
  GIT_EUNMERGED               = -10; (**< Merge in progress prevented operation  *)
  GIT_ENONFASTFORWARD         = -11; (**< Reference was not fast-forwardable  *)
  GIT_EINVALIDSPEC            = -12; (**< Name/ref spec was not in a valid format  *)
  GIT_ECONFLICT               = -13; (**< Checkout conflicts prevented operation  *)
  GIT_ELOCKED                 = -14; (**< Lock file prevented operation  *)
  GIT_EMODIFIED               = -15; (**< Reference value does not match expected  *)
  GIT_EAUTH                   = -16; (**< Authentication error  *)
  GIT_ECERTIFICATE            = -17; (**< Server certificate is invalid  *)
  GIT_EAPPLIED                = -18; (**< Patch/merge has already been applied  *)
  GIT_EPEEL                   = -19; (**< The requested peel operation is not possible  *)
  GIT_EEOF                    = -20; (**< Unexpected EOF  *)
  GIT_EINVALID                = -21; (**< Invalid operation or input  *)
  GIT_EUNCOMMITTED            = -22; (**< Uncommitted changes in index prevented operation  *)
  GIT_EDIRECTORY              = -23; (**< The operation is not valid for a directory  *)
  GIT_EMERGECONFLICT          = -24; (**< A merge conflict exists and cannot continue  *)
  GIT_PASSTHROUGH             = -30; (**< A user-configured callback refused to act  *)
  GIT_ITEROVER                = -31; (**< Signals end of iteration with iterator  *)
  GIT_RETRY                   = -32; (**< Internal only  *)
  GIT_EMISMATCH               = -33; (**< Hashsum mismatch in object  *)
  GIT_EINDEXDIRTY             = -34; (**< Unsaved changes in the index would be overwritten  *)
  GIT_EAPPLYFAIL              = -35; (**< Patch application failed  *)
  GIT_EOWNER                  = -36; (**< The object is not owned by the current user *)
type
  git_error_code = Integer;

  (**
   * Structure to store extra details of the last error that occurred.
   *
   * This is kept on a per-thread basis if GIT_THREADS was defined when the
   * library was build, otherwise one is kept globally for the library
   *)

  git_error_ = record
    message: PAnsiChar;
    klass: Integer;
  end;
  Pgit_error = ^git_error_;

  (** Error classes  *)

const
  GIT_ERROR_NONE              = 0;
  GIT_ERROR_NOMEMORY          = 1;
  GIT_ERROR_OS                = 2;
  GIT_ERROR_INVALID           = 3;
  GIT_ERROR_REFERENCE         = 4;
  GIT_ERROR_ZLIB              = 5;
  GIT_ERROR_REPOSITORY        = 6;
  GIT_ERROR_CONFIG            = 7;
  GIT_ERROR_REGEX             = 8;
  GIT_ERROR_ODB               = 9;
  GIT_ERROR_INDEX             = 10;
  GIT_ERROR_OBJECT            = 11;
  GIT_ERROR_NET               = 12;
  GIT_ERROR_TAG               = 13;
  GIT_ERROR_TREE              = 14;
  GIT_ERROR_INDEXER           = 15;
  GIT_ERROR_SSL               = 16;
  GIT_ERROR_SUBMODULE         = 17;
  GIT_ERROR_THREAD            = 18;
  GIT_ERROR_STASH             = 19;
  GIT_ERROR_CHECKOUT          = 20;
  GIT_ERROR_FETCHHEAD         = 21;
  GIT_ERROR_MERGE             = 22;
  GIT_ERROR_SSH               = 23;
  GIT_ERROR_FILTER            = 24;
  GIT_ERROR_REVERT            = 25;
  GIT_ERROR_CALLBACK          = 26;
  GIT_ERROR_CHERRYPICK        = 27;
  GIT_ERROR_DESCRIBE          = 28;
  GIT_ERROR_REBASE            = 29;
  GIT_ERROR_FILESYSTEM        = 30;
  GIT_ERROR_PATCH             = 31;
  GIT_ERROR_WORKTREE          = 32;
  GIT_ERROR_SHA1              = 33;
  GIT_ERROR_HTTP              = 34;
  GIT_ERROR_INTERNAL          = 35;
type
  git_error_t = Integer;

  (**
   * Return the last `git_error` object that was generated for the
   * current thread.
   *
   * The default behaviour of this function is to return NULL if no previous error has occurred.
   * However, libgit2's error strings are not cleared aggressively, so a prior
   * (unrelated) error may be returned. This can be avoided by only calling
   * this function if the prior call to a libgit2 API returned an error.
   *
   * @return A git_error object.
   *)

function git_error_last: Pgit_error; cdecl; external libgit2_dll;

(**
 * Clear the last library error that occurred for this thread.
 *)

procedure git_error_clear; cdecl; external libgit2_dll;

(**
 * Set the error message string for this thread.
 *
 * This function is public so that custom ODB backends and the like can
 * relay an error message through libgit2.  Most regular users of libgit2
 * will never need to call this function -- actually, calling it in most
 * circumstances (for example, calling from within a callback function)
 * will just end up having the value overwritten by libgit2 internals.
 *
 * This error message is stored in thread-local storage and only applies
 * to the particular thread that this libgit2 call is made from.
 *
 * @param error_class One of the `git_error_t` enum above describing the
 *                    general subsystem that is responsible for the error.
 * @param string The formatted error message to keep
 * @return 0 on success or -1 on failure
 *)

function git_error_set_str(error_class: Integer; string_: PAnsiChar): Integer; cdecl; external libgit2_dll;

(**
 * Set the error message to a special value for memory allocation failure.
 *
 * The normal `git_error_set_str()` function attempts to `strdup()` the
 * string that is passed in.  This is not a good idea when the error in
 * question is a memory allocation failure.  That circumstance has a
 * special setter function that sets the error string to a known and
 * statically allocated internal value.
 *)

procedure git_error_set_oom; cdecl; external libgit2_dll;

(** @}  *)



